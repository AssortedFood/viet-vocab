📂 PROJECT DIRECTORY STRUCTURE
──────────────────────────────
.
├── app
│   ├── api
│   │   └── vocab
│   │       └── route.js
│   ├── globals.css
│   ├── layout.js
│   ├── page.js
│   ├── sw-register.js
│   └── theme-provider.js
├── data
│   ├── schema.sql
│   └── vocab.db
├── deploy.sh
├── Dockerfile
├── lib
│   ├── db.js
│   ├── gpt.js
│   └── vocab.js
├── next.config.mjs
├── output.txt
├── package.json
├── public
│   ├── favicon.ico
│   ├── icons
│   │   ├── icon-192.png
│   │   └── icon-512.png
│   ├── manifest.json
│   ├── service-worker.js
│   ├── sw.js
│   └── workbox-4754cb34.js
├── README.md
└── TODO.md

8 directories, 25 files



📄 FILE: ./app/layout.js
──────────────────────────────
// app/layout.js
import SWRegister from "./sw-register"; // ✅ Import Service Worker Registration
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import AppThemeProvider from "./theme-provider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "VietVocab",
  description: "",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" style={{ height: "100%" }}>
      <head>
        <link rel="manifest" href="/manifest.json" />
        <meta name="theme-color" content="#3D3A4B" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable}`}
        style={{
          margin: 0,
          height: "100vh",
          width: "100vw",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
        }}
      >
        <SWRegister /> {/* ✅ Registers Service Worker */}
        <AppThemeProvider>{children}</AppThemeProvider>
      </body>
    </html>
  );
}



📄 FILE: ./app/api/vocab/route.js
──────────────────────────────
// app/api/vocab/route.js
"use server";
import { getAllVocab, addVocab, deleteVocab, updateFamiliarity, editVocab } from "../../../lib/vocab";

// Handle GET request - Fetch vocab list
export async function GET(req) {
  try {
    const { searchParams } = new URL(req.url);
    const sortBy = searchParams.get("sortBy") || "createdAt";
    const category = searchParams.get("category") || null;
    const vocab = await getAllVocab({ sortBy, category });

    return Response.json(vocab, { status: 200 });
  } catch (error) {
    console.error("❌ Error fetching vocab:", error);
    return Response.json({ error: "Failed to fetch vocab" }, { status: 500 });
  }
}

// Handle POST request - Add new vocab entry
export async function POST(req) {
  try {
    const { word, translation, description = "", category = "" } = await req.json();
    
    if (!word || !translation) {
      return Response.json({ error: "Word and translation are required." }, { status: 400 });
    }

    const result = await addVocab(word, translation, description, category);
    return Response.json({ success: true, lastID: result.lastID }, { status: 201 });
  } catch (error) {
    console.error("❌ Error adding vocab:", error);
    return Response.json({ error: "Failed to add vocab" }, { status: 500 });
  }
}

// Handle DELETE request - Remove vocab entry
export async function DELETE(req) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");

    if (!id) {
      return Response.json({ error: "Missing vocab ID." }, { status: 400 });
    }

    await deleteVocab(id);
    return Response.json({ success: true, deletedID: id }, { status: 200 });
  } catch (error) {
    console.error("❌ Error deleting vocab:", error);
    return Response.json({ error: "Failed to delete vocab" }, { status: 500 });
  }
}

// Handle PUT request - Update familiarity score
export async function PUT(req) {
  try {
    const { id, score } = await req.json();

    if (!id || ![1, 2, 3].includes(score)) {
      return Response.json({ error: "Invalid ID or familiarity score." }, { status: 400 });
    }

    await updateFamiliarity(id, score);
    return Response.json({ success: true, updatedID: id }, { status: 200 });
  } catch (error) {
    console.error("❌ Error updating familiarity:", error);
    return Response.json({ error: "Failed to update familiarity" }, { status: 500 });
  }
}

// Handle PATCH request - Edit vocab entry
export async function PATCH(req) {
    try {
      const { id, word, translation, description = "", category = "" } = await req.json();
  
      console.log("🔍 PATCH Request Data:", { id, word, translation, description, category });
  
      if (!id || !word || !translation) {
        return Response.json({ error: "ID, word, and translation are required." }, { status: 400 });
      }
  
      await editVocab(id, word, translation, description, category);
      return Response.json({ success: true, updatedID: id }, { status: 200 });
    } catch (error) {
      console.error("❌ Error editing vocab:", error);
      return Response.json({ error: "Failed to edit vocab" }, { status: 500 });
    }
  }


📄 FILE: ./app/sw-register.js
──────────────────────────────
// app/sw-register.js
"use client";

import { useEffect } from "react";

export default function SWRegister() {
  useEffect(() => {
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker
        .register("/service-worker.js")
        .then((reg) => console.log("✅ Service Worker registered!", reg))
        .catch((err) => console.error("❌ Service Worker registration failed:", err));
    }
  }, []);

  return null;
}



📄 FILE: ./app/theme-provider.js
──────────────────────────────
// app/theme-provider.js
"use client";

import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import { useMemo } from "react";

export default function AppThemeProvider({ children }) {
  const theme = useMemo(() =>
    createTheme({
      palette: {
        mode: "light",
        primary: {
          main: "#3D3A4B",
        },
        secondary: {
          main: "#6B6575",
        },
        background: {
          default: "#F5F3E7", // Ensure this is properly applied
          paper: "#E8E6D5",
        },
        text: {
          primary: "#2E2B3E",
          secondary: "#5C596B",
        },
      },
      components: {
        MuiCssBaseline: {
          styleOverrides: {
            "html, body": {
              backgroundColor: "#F5F3E7 !important", // Force MUI background globally
              height: "100%",
            },
          },
        },
        MuiButton: {
          styleOverrides: {
            root: {
              textTransform: "none", // ✅ Prevent all-caps
              borderRadius: "8px",
              fontWeight: "bold",
              fontFamily: "var(--font-geist-sans), Arial, sans-serif",
              "&:hover": {
                backgroundColor: "#342E41",
              },
            },
          },
        },
      },
    }), []
  );

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      {children}
    </ThemeProvider>
  );
}



📄 FILE: ./app/page.js
──────────────────────────────
// app/vocab/page.js
"use client";
import { useState, useEffect } from "react";
import { Container, TextField, Button, Select, MenuItem, Card, CardContent, Typography, IconButton, CircularProgress } from "@mui/material";
import { Add, Edit, Delete } from "@mui/icons-material";

export default function VocabPage() {
  const [vocabList, setVocabList] = useState(null); // Ensures SSR & Client match
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState("createdAt");
  const [categoryFilter, setCategoryFilter] = useState("");
  const [newWord, setNewWord] = useState({ word: "", translation: "", description: "", category: "" });
  const [showAddWord, setShowAddWord] = useState(false);
  const [editingWord, setEditingWord] = useState(null); // Track editing state

  useEffect(() => {
    loadVocab();
  }, [sortBy, categoryFilter]);

  // Fetch vocab from API
  const loadVocab = async () => {
    setLoading(true);
    try {
      const res = await fetch(`/api/vocab?sortBy=${sortBy}&category=${encodeURIComponent(categoryFilter)}`);
      const data = await res.json();
      setVocabList(data);
    } catch (error) {
      console.error("Error loading vocab:", error);
    }
    setLoading(false);
  };

  // Add new vocab via API
  const handleAddVocab = async () => {
    if (!newWord.word || !newWord.translation) return;

    try {
      await fetch("/api/vocab", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newWord),
      });

      setNewWord({ word: "", translation: "", description: "", category: "" });
      setShowAddWord(false); // Close form after adding
      loadVocab(); // Refresh vocab list
    } catch (error) {
      console.error("Error adding vocab:", error);
    }
  };

  // Delete vocab via API
  const handleDeleteVocab = async (id) => {
    try {
      await fetch(`/api/vocab?id=${id}`, { method: "DELETE" });
      setVocabList((prevList) => prevList.filter((word) => word.id !== id));
    } catch (error) {
      console.error("Error deleting vocab:", error);
    }
  };

  // Update familiarity via API
  const handleFamiliarityUpdate = async (id, score) => {
    try {
      await fetch("/api/vocab", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id, score }),
      });

      setVocabList((prevList) =>
        prevList.map((word) => (word.id === id ? { ...word, familiarity: score } : word))
      );
    } catch (error) {
      console.error("Error updating familiarity:", error);
    }
  };

  // Enable editing mode for a vocab word
  const startEditing = (word) => {
    setEditingWord({ ...word });
  };

  // Handle input changes while editing
  const handleEditChange = (field, value) => {
    setEditingWord((prev) => ({ ...prev, [field]: value }));
  };

  // Save edited vocab entry via API
  const handleEditSave = async (id) => {
    if (!editingWord.word || !editingWord.translation) return;
  
    try {
      const res = await fetch("/api/vocab", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id, ...editingWord }),
      });
  
      if (!res.ok) {
        const errorData = await res.json();
        console.error("❌ Edit Error:", errorData);
        return;
      }
  
      setEditingWord(null); // Exit editing mode
      loadVocab(); // Refresh list to reflect changes
    } catch (error) {
      console.error("❌ Error updating vocab:", error);
    }
  };
  

  return (
    <Container
      sx={{ 
        padding: "20px", 
        backgroundColor: "background.default", 
        minHeight: "100vh", // Ensures it fills the screen
        overflowY: "auto", // Allows scrolling when expanded
      }}
    >

      {/* Toggle Add Vocab Form Button */}
      <Button 
        variant="contained" 
        startIcon={<Add />} 
        fullWidth 
        onClick={() => setShowAddWord(!showAddWord)} 
        sx={{ marginBottom: "10px", bgcolor: "primary.main", "&:hover": { bgcolor: "primary.dark" } }}
      >
        {showAddWord ? "Close" : "Add New Vocab"}
      </Button>

      {/* Add New Vocab Section */}
      {showAddWord && (
        <div style={{ border: "1px solid #ddd", padding: "10px", marginBottom: "20px" }}>
          <TextField fullWidth label="Vietnamese" value={newWord.word} onChange={(e) => setNewWord({ ...newWord, word: e.target.value })} sx={{ marginBottom: "10px" }} />
          <TextField fullWidth label="English Translation" value={newWord.translation} onChange={(e) => setNewWord({ ...newWord, translation: e.target.value })} sx={{ marginBottom: "10px" }} />
          <Button variant="contained" color="success" fullWidth onClick={handleAddVocab} 
        sx={{ marginBottom: "10px", bgcolor: "primary.main", "&:hover": { bgcolor: "primary.dark" } }}>
            Add Vocab
          </Button>
        </div>
      )}

      {/* Category Filter - Full Width */}
      <TextField 
        fullWidth 
        label="Filter by Category" 
        value={categoryFilter} 
        onChange={(e) => setCategoryFilter(e.target.value)} 
        variant="outlined"
        sx={{ bgcolor: "background.paper", borderRadius: "5px", marginBottom: "10px" }}
      />

      {/* Loading State */}
      {loading && <CircularProgress sx={{ display: "block", margin: "20px auto" }} />}

      {/* Error Handling */}
      {!loading && vocabList === null && <p>Error loading vocabulary.</p>}
      {!loading && vocabList?.length === 0 && <p>No words found.</p>}

      {/* Vocabulary List */}
      {(vocabList || []).map((word) => (
        <Card key={word.id} sx={{ marginBottom: "10px", padding: "10px" }}>
          <CardContent>
            {editingWord?.id === word.id ? (
              // If editing, show editable inputs
              <>
                <TextField
                  fullWidth
                  label="Vietnamese"
                  value={editingWord.word}
                  onChange={(e) => handleEditChange("word", e.target.value)}
                  sx={{ marginBottom: "5px" }}
                />
                <TextField
                  fullWidth
                  label="English Translation"
                  value={editingWord.translation}
                  onChange={(e) => handleEditChange("translation", e.target.value)}
                  sx={{ marginBottom: "5px" }}
                />
                <div style={{ display: "flex", gap: "10px", marginTop: "5px" }}>
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => handleEditSave(word.id)}
                  >
                    Save
                  </Button>
                  <Button
                    variant="outlined"
                    color="secondary"
                    onClick={() => setEditingWord(null)} // Cancels editing
                  >
                    Cancel
                  </Button>
                </div>

              </>
            ) : (
              // Otherwise, show normal text
              <>
                <Typography variant="h6">{word.word} → {word.translation}</Typography>
                <Typography variant="body2" color="textSecondary">{word.description}</Typography>
                <Typography variant="caption">Category: {word.category || "None"}</Typography>
                <div style={{ display: "flex", justifyContent: "flex-end", marginTop: "10px" }}>
                  <IconButton color="primary" onClick={() => startEditing(word)}><Edit /></IconButton>
                  <IconButton color="secondary" onClick={() => handleDeleteVocab(word.id)}><Delete /></IconButton>
                </div>
              </>
            )}
          </CardContent>
        </Card>
      ))}
      </Container>
  );
}



📄 FILE: ./public/workbox-4754cb34.js
──────────────────────────────
define(["exports"],(function(t){"use strict";try{self["workbox:core:6.5.4"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self["workbox:routing:6.5.4"]&&_()}catch(t){}const n=t=>t&&"object"==typeof t?t:{handle:t};class r{constructor(t,e,s="GET"){this.handler=n(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=n(t)}}class i extends r{constructor(t,e,s){super((({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)}),e,s)}}class a{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener("fetch",(t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)}))}addCacheListener(){self.addEventListener("message",(t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map((e=>{"string"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})})));t.waitUntil(s),t.ports&&t.ports[0]&&s.then((()=>t.ports[0].postMessage(!0)))}}))}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith("http"))return;const n=s.origin===location.origin,{params:r,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:n,url:s});let a=i&&i.handler;const o=t.method;if(!a&&this.i.has(o)&&(a=this.i.get(o)),!a)return;let c;try{c=a.handle({url:s,request:t,event:e,params:r})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch((async n=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:r})}catch(t){t instanceof Error&&(n=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw n}))),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:n}){const r=this.t.get(s.method)||[];for(const i of r){let r;const a=i.match({url:t,sameOrigin:e,request:s,event:n});if(a)return r=a,(Array.isArray(r)&&0===r.length||a.constructor===Object&&0===Object.keys(a).length||"boolean"==typeof a)&&(r=void 0),{route:i,params:r}}return{}}setDefaultHandler(t,e="GET"){this.i.set(e,n(t))}setCatchHandler(t){this.o=n(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s("unregister-route-but-not-found-with-method",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s("unregister-route-route-not-registered");this.t.get(t.method).splice(e,1)}}let o;const c=()=>(o||(o=new a,o.addFetchListener(),o.addCacheListener()),o);function h(t,e,n){let a;if("string"==typeof t){const s=new URL(t,location.href);a=new r((({url:t})=>t.href===s.href),e,n)}else if(t instanceof RegExp)a=new i(t,e,n);else if("function"==typeof t)a=new r(t,e,n);else{if(!(t instanceof r))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=t}return c().registerRoute(a),a}try{self["workbox:strategies:6.5.4"]&&_()}catch(t){}const u={cacheWillUpdate:async({response:t})=>200===t.status||0===t.status?t:null},l={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},f=t=>[l.prefix,t,l.suffix].filter((t=>t&&t.length>0)).join("-"),w=t=>t||f(l.precache),d=t=>t||f(l.runtime);function p(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class y{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}const g=new Set;function m(t){return"string"==typeof t?new Request(t):t}class v{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new y,this.p=[],this.m=[...t.plugins],this.v=new Map;for(const t of this.m)this.v.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let n=m(t);if("navigate"===n.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const r=this.hasCallback("fetchDidFail")?n.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))n=await t({request:n.clone(),event:e})}catch(t){if(t instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:t.message})}const i=n.clone();try{let t;t=await fetch(n,"navigate"===n.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks("fetchDidSucceed"))t=await s({event:e,request:i,response:t});return t}catch(t){throw r&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:r.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=m(t);let s;const{cacheName:n,matchOptions:r}=this.u,i=await this.getCacheKey(e,"read"),a=Object.assign(Object.assign({},r),{cacheName:n});s=await caches.match(i,a);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:n,matchOptions:r,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const n=m(t);var r;await(r=0,new Promise((t=>setTimeout(t,r))));const i=await this.getCacheKey(n,"write");if(!e)throw new s("cache-put-with-no-response",{url:(a=i.url,new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var a;const o=await this.R(e);if(!o)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),l=this.hasCallback("cacheDidUpdate"),f=l?await async function(t,e,s,n){const r=p(e.url,s);if(e.url===r)return t.match(e,n);const i=Object.assign(Object.assign({},n),{ignoreSearch:!0}),a=await t.keys(e,i);for(const e of a)if(r===p(e.url,s))return t.match(e,n)}(u,i.clone(),["__WB_REVISION__"],h):null;try{await u.put(i,l?o.clone():o)}catch(t){if(t instanceof Error)throw"QuotaExceededError"===t.name&&await async function(){for(const t of g)await t()}(),t}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:c,oldResponse:f,newResponse:o.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let n=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))n=m(await t({mode:e,request:n,event:this.event,params:this.params}));this.h[s]=n}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if("function"==typeof e[t]){const s=this.v.get(e),n=n=>{const r=Object.assign(Object.assign({},n),{state:s});return e[t](r)};yield n}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async R(t){let e=t,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}class R{constructor(t={}){this.cacheName=d(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s="string"==typeof t.request?new Request(t.request):t.request,n="params"in t?t.params:void 0,r=new v(this,{event:e,request:s,params:n}),i=this.q(r,s,e);return[i,this.D(i,r,s,e)]}async q(t,e,n){let r;await t.runCallbacks("handlerWillStart",{event:n,request:e});try{if(r=await this.U(e,t),!r||"error"===r.type)throw new s("no-response",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks("handlerDidError"))if(r=await i({error:s,event:n,request:e}),r)break;if(!r)throw s}for(const s of t.iterateCallbacks("handlerWillRespond"))r=await s({event:n,request:e,response:r});return r}async D(t,e,s,n){let r,i;try{r=await t}catch(i){}try{await e.runCallbacks("handlerDidRespond",{event:n,request:s,response:r}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks("handlerDidComplete",{event:n,request:s,response:r,error:i}),e.destroy(),i)throw i}}function b(t){t.then((()=>{}))}function q(){return q=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var n in s)({}).hasOwnProperty.call(s,n)&&(t[n]=s[n])}return t},q.apply(null,arguments)}let D,U;const x=new WeakMap,L=new WeakMap,I=new WeakMap,C=new WeakMap,E=new WeakMap;let N={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return L.get(t);if("objectStoreNames"===e)return t.objectStoreNames||I.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return k(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function O(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(U||(U=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(B(this),e),k(x.get(this))}:function(...e){return k(t.apply(B(this),e))}:function(e,...s){const n=t.call(B(this),e,...s);return I.set(n,e.sort?e.sort():[e]),k(n)}}function T(t){return"function"==typeof t?O(t):(t instanceof IDBTransaction&&function(t){if(L.has(t))return;const e=new Promise(((e,s)=>{const n=()=>{t.removeEventListener("complete",r),t.removeEventListener("error",i),t.removeEventListener("abort",i)},r=()=>{e(),n()},i=()=>{s(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",r),t.addEventListener("error",i),t.addEventListener("abort",i)}));L.set(t,e)}(t),e=t,(D||(D=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((t=>e instanceof t))?new Proxy(t,N):t);var e}function k(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const n=()=>{t.removeEventListener("success",r),t.removeEventListener("error",i)},r=()=>{e(k(t.result)),n()},i=()=>{s(t.error),n()};t.addEventListener("success",r),t.addEventListener("error",i)}));return e.then((e=>{e instanceof IDBCursor&&x.set(e,t)})).catch((()=>{})),E.set(e,t),e}(t);if(C.has(t))return C.get(t);const e=T(t);return e!==t&&(C.set(t,e),E.set(e,t)),e}const B=t=>E.get(t);const P=["get","getKey","getAll","getAllKeys","count"],M=["put","add","delete","clear"],W=new Map;function j(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(W.get(e))return W.get(e);const s=e.replace(/FromIndex$/,""),n=e!==s,r=M.includes(s);if(!(s in(n?IDBIndex:IDBObjectStore).prototype)||!r&&!P.includes(s))return;const i=async function(t,...e){const i=this.transaction(t,r?"readwrite":"readonly");let a=i.store;return n&&(a=a.index(e.shift())),(await Promise.all([a[s](...e),r&&i.done]))[0]};return W.set(e,i),i}N=(t=>q({},t,{get:(e,s,n)=>j(e,s)||t.get(e,s,n),has:(e,s)=>!!j(e,s)||t.has(e,s)}))(N);try{self["workbox:expiration:6.5.4"]&&_()}catch(t){}const S="cache-entries",K=t=>{const e=new URL(t,location.href);return e.hash="",e.href};class A{constructor(t){this._=null,this.L=t}I(t){const e=t.createObjectStore(S,{keyPath:"id"});e.createIndex("cacheName","cacheName",{unique:!1}),e.createIndex("timestamp","timestamp",{unique:!1})}C(t){this.I(t),this.L&&function(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);e&&s.addEventListener("blocked",(t=>e(t.oldVersion,t))),k(s).then((()=>{}))}(this.L)}async setTimestamp(t,e){const s={url:t=K(t),timestamp:e,cacheName:this.L,id:this.N(t)},n=(await this.getDb()).transaction(S,"readwrite",{durability:"relaxed"});await n.store.put(s),await n.done}async getTimestamp(t){const e=await this.getDb(),s=await e.get(S,this.N(t));return null==s?void 0:s.timestamp}async expireEntries(t,e){const s=await this.getDb();let n=await s.transaction(S).store.index("timestamp").openCursor(null,"prev");const r=[];let i=0;for(;n;){const s=n.value;s.cacheName===this.L&&(t&&s.timestamp<t||e&&i>=e?r.push(n.value):i++),n=await n.continue()}const a=[];for(const t of r)await s.delete(S,t.id),a.push(t.url);return a}N(t){return this.L+"|"+K(t)}async getDb(){return this._||(this._=await function(t,e,{blocked:s,upgrade:n,blocking:r,terminated:i}={}){const a=indexedDB.open(t,e),o=k(a);return n&&a.addEventListener("upgradeneeded",(t=>{n(k(a.result),t.oldVersion,t.newVersion,k(a.transaction),t)})),s&&a.addEventListener("blocked",(t=>s(t.oldVersion,t.newVersion,t))),o.then((t=>{i&&t.addEventListener("close",(()=>i())),r&&t.addEventListener("versionchange",(t=>r(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),o}("workbox-expiration",1,{upgrade:this.C.bind(this)})),this._}}class F{constructor(t,e={}){this.O=!1,this.T=!1,this.k=e.maxEntries,this.B=e.maxAgeSeconds,this.P=e.matchOptions,this.L=t,this.M=new A(t)}async expireEntries(){if(this.O)return void(this.T=!0);this.O=!0;const t=this.B?Date.now()-1e3*this.B:0,e=await this.M.expireEntries(t,this.k),s=await self.caches.open(this.L);for(const t of e)await s.delete(t,this.P);this.O=!1,this.T&&(this.T=!1,b(this.expireEntries()))}async updateTimestamp(t){await this.M.setTimestamp(t,Date.now())}async isURLExpired(t){if(this.B){const e=await this.M.getTimestamp(t),s=Date.now()-1e3*this.B;return void 0===e||e<s}return!1}async delete(){this.T=!1,await this.M.expireEntries(1/0)}}try{self["workbox:range-requests:6.5.4"]&&_()}catch(t){}async function H(t,e){try{if(206===e.status)return e;const n=t.headers.get("range");if(!n)throw new s("no-range-header");const r=function(t){const e=t.trim().toLowerCase();if(!e.startsWith("bytes="))throw new s("unit-must-be-bytes",{normalizedRangeHeader:e});if(e.includes(","))throw new s("single-range-only",{normalizedRangeHeader:e});const n=/(\d*)-(\d*)/.exec(e);if(!n||!n[1]&&!n[2])throw new s("invalid-range-values",{normalizedRangeHeader:e});return{start:""===n[1]?void 0:Number(n[1]),end:""===n[2]?void 0:Number(n[2])}}(n),i=await e.blob(),a=function(t,e,n){const r=t.size;if(n&&n>r||e&&e<0)throw new s("range-not-satisfiable",{size:r,end:n,start:e});let i,a;return void 0!==e&&void 0!==n?(i=e,a=n+1):void 0!==e&&void 0===n?(i=e,a=r):void 0!==n&&void 0===e&&(i=r-n,a=r),{start:i,end:a}}(i,r.start,r.end),o=i.slice(a.start,a.end),c=o.size,h=new Response(o,{status:206,statusText:"Partial Content",headers:e.headers});return h.headers.set("Content-Length",String(c)),h.headers.set("Content-Range",`bytes ${a.start}-${a.end-1}/${i.size}`),h}catch(t){return new Response("",{status:416,statusText:"Range Not Satisfiable"})}}function $(t,e){const s=e();return t.waitUntil(s),s}try{self["workbox:precaching:6.5.4"]&&_()}catch(t){}function z(t){if(!t)throw new s("add-to-cache-list-unexpected-type",{entry:t});if("string"==typeof t){const e=new URL(t,location.href);return{cacheKey:e.href,url:e.href}}const{revision:e,url:n}=t;if(!n)throw new s("add-to-cache-list-unexpected-type",{entry:t});if(!e){const t=new URL(n,location.href);return{cacheKey:t.href,url:t.href}}const r=new URL(n,location.href),i=new URL(n,location.href);return r.searchParams.set("__WB_REVISION__",e),{cacheKey:r.href,url:i.href}}class G{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:t,state:e})=>{e&&(e.originalRequest=t)},this.cachedResponseWillBeUsed=async({event:t,state:e,cachedResponse:s})=>{if("install"===t.type&&e&&e.originalRequest&&e.originalRequest instanceof Request){const t=e.originalRequest.url;s?this.notUpdatedURLs.push(t):this.updatedURLs.push(t)}return s}}}class V{constructor({precacheController:t}){this.cacheKeyWillBeUsed=async({request:t,params:e})=>{const s=(null==e?void 0:e.cacheKey)||this.W.getCacheKeyForURL(t.url);return s?new Request(s,{headers:t.headers}):t},this.W=t}}let J,Q;async function X(t,e){let n=null;if(t.url){n=new URL(t.url).origin}if(n!==self.location.origin)throw new s("cross-origin-copy-response",{origin:n});const r=t.clone(),i={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},a=e?e(i):i,o=function(){if(void 0===J){const t=new Response("");if("body"in t)try{new Response(t.body),J=!0}catch(t){J=!1}J=!1}return J}()?r.body:await r.blob();return new Response(o,a)}class Y extends R{constructor(t={}){t.cacheName=w(t.cacheName),super(t),this.j=!1!==t.fallbackToNetwork,this.plugins.push(Y.copyRedirectedCacheableResponsesPlugin)}async U(t,e){const s=await e.cacheMatch(t);return s||(e.event&&"install"===e.event.type?await this.S(t,e):await this.K(t,e))}async K(t,e){let n;const r=e.params||{};if(!this.j)throw new s("missing-precache-entry",{cacheName:this.cacheName,url:t.url});{const s=r.integrity,i=t.integrity,a=!i||i===s;n=await e.fetch(new Request(t,{integrity:"no-cors"!==t.mode?i||s:void 0})),s&&a&&"no-cors"!==t.mode&&(this.A(),await e.cachePut(t,n.clone()))}return n}async S(t,e){this.A();const n=await e.fetch(t);if(!await e.cachePut(t,n.clone()))throw new s("bad-precaching-response",{url:t.url,status:n.status});return n}A(){let t=null,e=0;for(const[s,n]of this.plugins.entries())n!==Y.copyRedirectedCacheableResponsesPlugin&&(n===Y.defaultPrecacheCacheabilityPlugin&&(t=s),n.cacheWillUpdate&&e++);0===e?this.plugins.push(Y.defaultPrecacheCacheabilityPlugin):e>1&&null!==t&&this.plugins.splice(t,1)}}Y.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:t})=>!t||t.status>=400?null:t},Y.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:t})=>t.redirected?await X(t):t};class Z{constructor({cacheName:t,plugins:e=[],fallbackToNetwork:s=!0}={}){this.F=new Map,this.H=new Map,this.$=new Map,this.u=new Y({cacheName:w(t),plugins:[...e,new V({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this.u}precache(t){this.addToCacheList(t),this.G||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this.G=!0)}addToCacheList(t){const e=[];for(const n of t){"string"==typeof n?e.push(n):n&&void 0===n.revision&&e.push(n.url);const{cacheKey:t,url:r}=z(n),i="string"!=typeof n&&n.revision?"reload":"default";if(this.F.has(r)&&this.F.get(r)!==t)throw new s("add-to-cache-list-conflicting-entries",{firstEntry:this.F.get(r),secondEntry:t});if("string"!=typeof n&&n.integrity){if(this.$.has(t)&&this.$.get(t)!==n.integrity)throw new s("add-to-cache-list-conflicting-integrities",{url:r});this.$.set(t,n.integrity)}if(this.F.set(r,t),this.H.set(r,i),e.length>0){const t=`Workbox is precaching URLs without revision info: ${e.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(t)}}}install(t){return $(t,(async()=>{const e=new G;this.strategy.plugins.push(e);for(const[e,s]of this.F){const n=this.$.get(s),r=this.H.get(e),i=new Request(e,{integrity:n,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:i,event:t}))}const{updatedURLs:s,notUpdatedURLs:n}=e;return{updatedURLs:s,notUpdatedURLs:n}}))}activate(t){return $(t,(async()=>{const t=await self.caches.open(this.strategy.cacheName),e=await t.keys(),s=new Set(this.F.values()),n=[];for(const r of e)s.has(r.url)||(await t.delete(r),n.push(r.url));return{deletedURLs:n}}))}getURLsToCacheKeys(){return this.F}getCachedURLs(){return[...this.F.keys()]}getCacheKeyForURL(t){const e=new URL(t,location.href);return this.F.get(e.href)}getIntegrityForCacheKey(t){return this.$.get(t)}async matchPrecache(t){const e=t instanceof Request?t.url:t,s=this.getCacheKeyForURL(e);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(t){const e=this.getCacheKeyForURL(t);if(!e)throw new s("non-precached-url",{url:t});return s=>(s.request=new Request(t),s.params=Object.assign({cacheKey:e},s.params),this.strategy.handle(s))}}const tt=()=>(Q||(Q=new Z),Q);class et extends r{constructor(t,e){super((({request:s})=>{const n=t.getURLsToCacheKeys();for(const r of function*(t,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:s="index.html",cleanURLs:n=!0,urlManipulation:r}={}){const i=new URL(t,location.href);i.hash="",yield i.href;const a=function(t,e=[]){for(const s of[...t.searchParams.keys()])e.some((t=>t.test(s)))&&t.searchParams.delete(s);return t}(i,e);if(yield a.href,s&&a.pathname.endsWith("/")){const t=new URL(a.href);t.pathname+=s,yield t.href}if(n){const t=new URL(a.href);t.pathname+=".html",yield t.href}if(r){const t=r({url:i});for(const e of t)yield e.href}}(s.url,e)){const e=n.get(r);if(e){return{cacheKey:e,integrity:t.getIntegrityForCacheKey(e)}}}}),t.strategy)}}t.CacheFirst=class extends R{async U(t,e){let n,r=await e.cacheMatch(t);if(!r)try{r=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(n=t)}if(!r)throw new s("no-response",{url:t.url,error:n});return r}},t.ExpirationPlugin=class{constructor(t={}){this.cachedResponseWillBeUsed=async({event:t,request:e,cacheName:s,cachedResponse:n})=>{if(!n)return null;const r=this.V(n),i=this.J(s);b(i.expireEntries());const a=i.updateTimestamp(e.url);if(t)try{t.waitUntil(a)}catch(t){}return r?n:null},this.cacheDidUpdate=async({cacheName:t,request:e})=>{const s=this.J(t);await s.updateTimestamp(e.url),await s.expireEntries()},this.X=t,this.B=t.maxAgeSeconds,this.Y=new Map,t.purgeOnQuotaError&&function(t){g.add(t)}((()=>this.deleteCacheAndMetadata()))}J(t){if(t===d())throw new s("expire-custom-caches-only");let e=this.Y.get(t);return e||(e=new F(t,this.X),this.Y.set(t,e)),e}V(t){if(!this.B)return!0;const e=this.Z(t);if(null===e)return!0;return e>=Date.now()-1e3*this.B}Z(t){if(!t.headers.has("date"))return null;const e=t.headers.get("date"),s=new Date(e).getTime();return isNaN(s)?null:s}async deleteCacheAndMetadata(){for(const[t,e]of this.Y)await self.caches.delete(t),await e.delete();this.Y=new Map}},t.NetworkFirst=class extends R{constructor(t={}){super(t),this.plugins.some((t=>"cacheWillUpdate"in t))||this.plugins.unshift(u),this.tt=t.networkTimeoutSeconds||0}async U(t,e){const n=[],r=[];let i;if(this.tt){const{id:s,promise:a}=this.et({request:t,logs:n,handler:e});i=s,r.push(a)}const a=this.st({timeoutId:i,request:t,logs:n,handler:e});r.push(a);const o=await e.waitUntil((async()=>await e.waitUntil(Promise.race(r))||await a)());if(!o)throw new s("no-response",{url:t.url});return o}et({request:t,logs:e,handler:s}){let n;return{promise:new Promise((e=>{n=setTimeout((async()=>{e(await s.cacheMatch(t))}),1e3*this.tt)})),id:n}}async st({timeoutId:t,request:e,logs:s,handler:n}){let r,i;try{i=await n.fetchAndCachePut(e)}catch(t){t instanceof Error&&(r=t)}return t&&clearTimeout(t),!r&&i||(i=await n.cacheMatch(e)),i}},t.RangeRequestsPlugin=class{constructor(){this.cachedResponseWillBeUsed=async({request:t,cachedResponse:e})=>e&&t.headers.has("range")?await H(t,e):e}},t.StaleWhileRevalidate=class extends R{constructor(t={}){super(t),this.plugins.some((t=>"cacheWillUpdate"in t))||this.plugins.unshift(u)}async U(t,e){const n=e.fetchAndCachePut(t).catch((()=>{}));e.waitUntil(n);let r,i=await e.cacheMatch(t);if(i);else try{i=await n}catch(t){t instanceof Error&&(r=t)}if(!i)throw new s("no-response",{url:t.url,error:r});return i}},t.cleanupOutdatedCaches=function(){self.addEventListener("activate",(t=>{const e=w();t.waitUntil((async(t,e="-precache-")=>{const s=(await self.caches.keys()).filter((s=>s.includes(e)&&s.includes(self.registration.scope)&&s!==t));return await Promise.all(s.map((t=>self.caches.delete(t)))),s})(e).then((t=>{})))}))},t.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},t.precacheAndRoute=function(t,e){!function(t){tt().precache(t)}(t),function(t){const e=tt();h(new et(e,t))}(e)},t.registerRoute=h}));



📄 FILE: ./public/sw.js
──────────────────────────────
if(!self.define){let e,s={};const n=(n,a)=>(n=new URL(n+".js",a).href,s[n]||new Promise((s=>{if("document"in self){const e=document.createElement("script");e.src=n,e.onload=s,document.head.appendChild(e)}else e=n,importScripts(n),s()})).then((()=>{let e=s[n];if(!e)throw new Error(`Module ${n} didn’t register its module`);return e})));self.define=(a,t)=>{const i=e||("document"in self?document.currentScript.src:"")||location.href;if(s[i])return;let c={};const r=e=>n(e,i),o={module:{uri:i},exports:c,require:r};s[i]=Promise.all(a.map((e=>o[e]||r(e)))).then((e=>(t(...e),c)))}}define(["./workbox-4754cb34"],(function(e){"use strict";importScripts(),self.skipWaiting(),e.clientsClaim(),e.precacheAndRoute([{url:"/_next/app-build-manifest.json",revision:"227bcf573e48f7ffacb471c784fe9a7a"},{url:"/_next/static/chunks/130-7ac7571d3bdb068c.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/189-76426ddf98383567.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/4bd1b696-1c20c52a7d48565d.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/517-85a5eb33b20df93d.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/818-a8291c839efaaf62.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/app/_not-found/page-cf561b08769316e0.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/app/api/vocab/route-402c9782c00e9622.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/app/layout-0e9d4dec6e2afc77.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/app/page-b9374a2a15df757d.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/framework-6b27c2b7aa38af2d.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/main-app-1ce5408570ef6d82.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/main-dbafd64bd50ed2f6.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/pages/_app-d23763e3e6c904ff.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/pages/_error-9b7125ad1a1e68fa.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/chunks/polyfills-42372ed130431b0a.js",revision:"846118c33b2c0e922d7b3a7676f81f6f"},{url:"/_next/static/chunks/webpack-591e0eb94decce02.js",revision:"dPUmhyHeX6VrosEWKHK7-"},{url:"/_next/static/css/735d15465953feb4.css",revision:"735d15465953feb4"},{url:"/_next/static/dPUmhyHeX6VrosEWKHK7-/_buildManifest.js",revision:"8c347785c953bc9aca247cd961fe14ca"},{url:"/_next/static/dPUmhyHeX6VrosEWKHK7-/_ssgManifest.js",revision:"b6652df95db52feb4daf4eca35380933"},{url:"/_next/static/media/569ce4b8f30dc480-s.p.woff2",revision:"ef6cefb32024deac234e82f932a95cbd"},{url:"/_next/static/media/747892c23ea88013-s.woff2",revision:"a0761690ccf4441ace5cec893b82d4ab"},{url:"/_next/static/media/93f479601ee12b01-s.p.woff2",revision:"da83d5f06d825c5ae65b7cca706cb312"},{url:"/_next/static/media/ba015fad6dcf6784-s.woff2",revision:"8ea4f719af3312a055caf09f34c89a77"},{url:"/favicon.ico",revision:"ce1ec9b049b2b75841ecb2722afc7a03"},{url:"/icons/icon-192.png",revision:"b8db8689a36a6933b7beddfdd44650ba"},{url:"/icons/icon-512.png",revision:"43dbfa0b47bcfc5ccab01f06473ace02"},{url:"/manifest.json",revision:"73a928fcad0c584e8c6b21ab3f4d5d4b"},{url:"/service-worker.js",revision:"a6a9123958ffd9af6cd2e83073394aa3"}],{ignoreURLParametersMatching:[]}),e.cleanupOutdatedCaches(),e.registerRoute("/",new e.NetworkFirst({cacheName:"start-url",plugins:[{cacheWillUpdate:async({request:e,response:s,event:n,state:a})=>s&&"opaqueredirect"===s.type?new Response(s.body,{status:200,statusText:"OK",headers:s.headers}):s}]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:gstatic)\.com\/.*/i,new e.CacheFirst({cacheName:"google-fonts-webfonts",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:31536e3})]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:googleapis)\.com\/.*/i,new e.StaleWhileRevalidate({cacheName:"google-fonts-stylesheets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,new e.StaleWhileRevalidate({cacheName:"static-font-assets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,new e.StaleWhileRevalidate({cacheName:"static-image-assets",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/image\?url=.+$/i,new e.StaleWhileRevalidate({cacheName:"next-image",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp3|wav|ogg)$/i,new e.CacheFirst({cacheName:"static-audio-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp4)$/i,new e.CacheFirst({cacheName:"static-video-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:js)$/i,new e.StaleWhileRevalidate({cacheName:"static-js-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:css|less)$/i,new e.StaleWhileRevalidate({cacheName:"static-style-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/data\/.+\/.+\.json$/i,new e.StaleWhileRevalidate({cacheName:"next-data",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:json|xml|csv)$/i,new e.NetworkFirst({cacheName:"static-data-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({url:e})=>{if(!(self.origin===e.origin))return!1;const s=e.pathname;return!s.startsWith("/api/auth/")&&!!s.startsWith("/api/")}),new e.NetworkFirst({cacheName:"apis",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:16,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({url:e})=>{if(!(self.origin===e.origin))return!1;return!e.pathname.startsWith("/api/")}),new e.NetworkFirst({cacheName:"others",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({url:e})=>!(self.origin===e.origin)),new e.NetworkFirst({cacheName:"cross-origin",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:3600})]}),"GET")}));



📄 FILE: ./public/service-worker.js
──────────────────────────────
// public/service-worker.js

self.addEventListener("install", (event) => {
    console.log("Service Worker installing...");
    self.skipWaiting();
});

self.addEventListener("activate", (event) => {
    console.log("Service Worker activated!");
});

self.addEventListener("fetch", (event) => {
    console.log("Fetching:", event.request.url);
});



📄 FILE: ./lib/db.js
──────────────────────────────
// lib/db.js
"use server";
import sqlite3 from "sqlite3";
import { open } from "sqlite";
import path from "path";

// Open SQLite database connection
const dbPromise = open({
  filename: path.join(process.cwd(), "data", "vocab.db"), // Ensure correct path
  driver: sqlite3.Database,
});

// Function to get database instance
export async function getDB() {
  return dbPromise;
}



📄 FILE: ./lib/gpt.js
──────────────────────────────
// lib/gpt.js
"use server";
import OpenAI from "openai";
import { zodResponseFormat } from "openai/helpers/zod";
import { z } from "zod";
import { getCategories } from "./vocab.js";

// Debug flag (set to `true` to enable logging, `false` to disable)
const debug = false;

// Define structured output schema using Zod
const VocabCorrectionSchema = z.object({
  word: z.string().describe("The corrected Vietnamese word with proper accents."),
  translation: z.string().describe("The translation, modified only if the existing one is completely incorrect."),
  description: z.string().describe("Corrected description that uses the provided Vietnamese word/phrase in a sentence with proper Vietnamese accents and tones and an English translation."),
  category: z.string().describe("A suitable category for this word based on existing ones, or a new one if needed."),
});

// Function to correct vocab using OpenAI API
export async function correctVocabEntry(word, translation, description = "", category = "") {
  if (!process.env.OPENAI_API_KEY) {
    console.warn("⚠️ OPENAI_API_KEY not set. Skipping correction.");
    return { word, translation, description, category };
  }

  // Initialize OpenAI
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  const model = "gpt-4o-mini";

  try {
    if (debug) console.log("🛠 Fetching categories...");
    const existingCategories = await getCategories();

    // Merge existing categories with refined list, ensuring no duplicates
    const categorySet = new Set([
      ...existingCategories,
      "Greetings & Politeness", "Common Expressions", "Questions & Responses",
      "Family & Relationships", "Emotions & Feelings", "Numbers & Time", "Food & Drinks",
      "Travel & Transportation", "Shopping & Money", "Work & Business", "Education & Learning",
      "Health & Medicine", "Technology & Media", "Sports & Leisure", "Household & Daily Life",
      "Nature & Environment", "Laws & Government", "Religion & Spirituality", "Vietnamese Idioms",
      "Slang & Informal Speech"
    ]);

    const allCategories = Array.from(categorySet);

    // Define the structured prompt
    const messages = [
      {
        role: "system",
        content: `You are a Vietnamese language assistant. Your job is to:
          1️⃣ **Fix incorrect Vietnamese accents and tones** in the word (e.g., 'cam on' → 'Cám Ơn').
          2️⃣ **Modify the English translation** only if the existing one is completely incorrect, ensuring proper grammar and capitalization.
          3️⃣ **Choose the most relevant category** from this list, prioritizing specificity over generic labels: ${JSON.stringify(allCategories)}.
          4️⃣ **If no suitable category exists**, create a new one that accurately represents the word.
          5️⃣ **If no description is provided**, generate a simple sentence demonstrating usage of the Vietnamese word accompanied by an **English translation** of the Vietnamese sentence.
          6️⃣ **Ensure all Vietnamese text uses correct diacritics** for proper readability.
          
          Return only the corrected word, translation, description, and category as structured output.
        `,
      },
      {
        role: "user",
        content: `Here is a vocabulary entry that needs correction:
          🔹 **Word**: "${word}"
          🔹 **Translation**: "${translation}"
          🔹 **Description**: "${description}"
          🔹 **Category**: "${category}"
          
          Please correct it and return structured output.
        `,
      },
    ];

    if (debug) console.log("🛠 Sending request to OpenAI...");
    const completion = await openai.chat.completions.create({
      model: model,
      messages,
      response_format: zodResponseFormat(VocabCorrectionSchema, "correction"),
    });

    if (debug) console.log("✅ Full OpenAI API Response:", JSON.stringify(completion, null, 2));

    // ✅ Extracting content manually
    const rawContent = completion.choices?.[0]?.message?.content;
    if (debug) console.log("✅ Raw Content:", rawContent);

    if (!rawContent) {
      console.error("❌ OpenAI returned empty content.");
      return { word, translation, description, category }; // Fallback
    }

    // ✅ Ensure content is parsed correctly
    const parsedResponse = JSON.parse(rawContent);
    if (debug) console.log("✅ Parsed OpenAI Correction:", JSON.stringify(parsedResponse, null, 2));

    return parsedResponse || { word, translation, description, category };
  } catch (error) {
    console.error("❌ OpenAI API Error:", error);
    return { word, translation, description, category }; // Fallback to original values
  }
}



📄 FILE: ./lib/vocab.js
──────────────────────────────
// lib/vocab.js
"use server";
import { getDB } from "./db.js";
import { correctVocabEntry } from "./gpt.js";

// Helper function to ensure plain objects
function formatDBResult(result) {
  return { changes: result.changes || 0, lastID: result.lastID || null, success: result.changes > 0 || !!result.lastID };
}

// Fetch all vocab words
export async function getAllVocab({ sortBy = "createdAt", category = null }) {
  const db = await getDB();
  let query = `SELECT * FROM vocab`;
  const params = [];

  if (category) {
    query += ` WHERE category LIKE ?`;
    params.push(`%${category}%`); // Allows partial matches
  }

  query += ` ORDER BY ${sortBy} DESC`;
  return db.all(query, params);
}

// Add a new vocabulary word
export async function addVocab(word, translation, description = "", category = "") {
  if (!word || !translation) throw new Error("Word and translation are required.");

  const db = await getDB();

  // Step 1: Insert into database
  const result = await db.run(
    `INSERT INTO vocab (word, translation, description, category) VALUES (?, ?, ?, ?)`,
    [word, translation, description, category]
  );
  const lastID = result.lastID;

  // Step 2: Try to correct the entry with OpenAI
  let correctedVocab;
  try {
    correctedVocab = await correctVocabEntry(word, translation, description, category);
  } catch (error) {
    console.error("OpenAI correction failed:", error);
    return { lastID, success: true }; // Return early if API fails
  }

  // Step 3: If corrections were made, update the database
  if (
    correctedVocab.word !== word || 
    correctedVocab.translation !== translation || 
    correctedVocab.description !== description || 
    correctedVocab.category !== category
  ) {
    await db.run(
      `UPDATE vocab SET word = ?, translation = ?, description = ?, category = ? WHERE id = ?`,
      [correctedVocab.word, correctedVocab.translation, correctedVocab.description, correctedVocab.category, lastID]
    );
  }

  return { lastID, success: true };
}

// Edit an existing vocabulary word
export async function editVocab(id, word, translation, description = "", category = "") {
  if (!id || !word || !translation) throw new Error("ID, word, and translation are required.");

  const db = await getDB();

  // Step 1: Fetch existing entry (optional but useful for debugging)
  const existingEntry = await db.get(`SELECT * FROM vocab WHERE id = ?`, [id]);
  if (!existingEntry) throw new Error(`Vocab entry with ID ${id} not found.`);

  console.log("🔍 Existing Entry Before Update:", existingEntry);

  // Step 2: Directly update the database without AI correction
  const result = await db.run(
    `UPDATE vocab SET word = ?, translation = ?, description = ?, category = ? WHERE id = ?`,
    [word, translation, description, category, id]
  );

  console.log("🛠 SQLite Update Result:", result);

  // Step 3: Verify if the update actually happened
  if (result.changes === 0) {
    console.error(`❌ No changes made in the database for ID ${id}.`);
  } else {
    console.log(`✅ Successfully updated vocab ID ${id}.`);
  }

  return formatDBResult(result);
};


// Delete a vocabulary word by ID
export async function deleteVocab(id) {
  const db = await getDB();
  const result = await db.run(`DELETE FROM vocab WHERE id = ?`, [id]);

  return formatDBResult(result);
}

// Update familiarity score for a vocab word
export async function updateFamiliarity(id, score) {
  if (![1, 2, 3].includes(score)) {
    throw new Error("Invalid familiarity score. Must be 1 (😟), 2 (😐), or 3 (🙂).");
  }

  const db = await getDB();
  const result = await db.run(`UPDATE vocab SET familiarity = ? WHERE id = ?`, [score, id]);

  return formatDBResult(result);
}

// Get a list of the currently used Categories
export async function getCategories() {
  const db = await getDB();
  const result = await db.all(`SELECT DISTINCT category FROM vocab;`)

  return result.map(row => row.category);
}


